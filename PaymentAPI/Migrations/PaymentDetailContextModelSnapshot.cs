// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentAPI.Models;
using Microsoft.AspNetCore.Http.HttpResults;

#nullable disable

namespace PaymentAPI.Migrations
{
    [DbContext(typeof(PaymentDetailContext))]
    partial class PaymentDetailContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PaymentAPI.Models.PaymentDetail", b =>
                {
                    b.Property<Guid>("PaymentDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("CardOwnerName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SecurityCode")
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("PaymentDetailID");

                    b.ToTable("PaymentDetails");
                });
#pragma warning restore 612, 618
        }
    }


public static class PaymentDetailEndpoints
{
	public static void MapPaymentDetailEndpoints (this IEndpointRouteBuilder routes)
    {
        var group = routes.MapGroup("/api/PaymentDetail");

        group.MapGet("/", async (PaymentDetailContext db) =>
        {
            return await db.PaymentDetails.ToListAsync();
        })
        .WithName("GetAllPaymentDetails");

        group.MapGet("/{id}", async Task<Results<Ok<PaymentDetail>, NotFound>> (Guid paymentdetailid, PaymentDetailContext db) =>
        {
            return await db.PaymentDetails.AsNoTracking()
                .FirstOrDefaultAsync(model => model.PaymentDetailID == paymentdetailid)
                is PaymentDetail model
                    ? TypedResults.Ok(model)
                    : TypedResults.NotFound();
        })
        .WithName("GetPaymentDetailById");

        group.MapPut("/{id}", async Task<Results<Ok, NotFound>> (Guid paymentdetailid, PaymentDetail paymentDetail, PaymentDetailContext db) =>
        {
            var affected = await db.PaymentDetails
                .Where(model => model.PaymentDetailID == paymentdetailid)
                .ExecuteUpdateAsync(setters => setters
                  .SetProperty(m => m.PaymentDetailID, paymentDetail.PaymentDetailID)
                  .SetProperty(m => m.CardOwnerName, paymentDetail.CardOwnerName)
                  .SetProperty(m => m.CardNumber, paymentDetail.CardNumber)
                  .SetProperty(m => m.ExpirationDate, paymentDetail.ExpirationDate)
                  .SetProperty(m => m.SecurityCode, paymentDetail.SecurityCode)
                  );
            return affected == 1 ? TypedResults.Ok() : TypedResults.NotFound();
        })
        .WithName("UpdatePaymentDetail");

        group.MapPost("/", async (PaymentDetail paymentDetail, PaymentDetailContext db) =>
        {
            db.PaymentDetails.Add(paymentDetail);
            await db.SaveChangesAsync();
            return TypedResults.Created($"/api/PaymentDetail/{paymentDetail.PaymentDetailID}",paymentDetail);
        })
        .WithName("CreatePaymentDetail");

        group.MapDelete("/{id}", async Task<Results<Ok, NotFound>> (Guid paymentdetailid, PaymentDetailContext db) =>
        {
            var affected = await db.PaymentDetails
                .Where(model => model.PaymentDetailID == paymentdetailid)
                .ExecuteDeleteAsync();
            return affected == 1 ? TypedResults.Ok() : TypedResults.NotFound();
        })
        .WithName("DeletePaymentDetail");
    }
}}
